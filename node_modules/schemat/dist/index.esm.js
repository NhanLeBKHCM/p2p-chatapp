var createValidator = function (schema) { return function (data) {
    var errorMessages = Object.keys(schema).reduce(function (errorMessages, key) {
        var dataToValidate = data[key];
        var validator = schema[key];
        var errorMessage;
        if (!Array.isArray(validator)) {
            errorMessage = validator(dataToValidate, data);
        }
        else {
            errorMessage = validator.reduce(function (errorMessageSum, validator) {
                if (typeof errorMessageSum !== 'undefined')
                    return errorMessageSum;
                return validator(dataToValidate, data);
            }, undefined);
        }
        if (typeof errorMessage === 'string' || (typeof errorMessage === 'object' && Object.keys(errorMessage).length)) {
            if (typeof errorMessages === 'object') {
                errorMessages[key] = errorMessage;
            }
        }
        return errorMessages;
    }, {});
    return typeof errorMessages === 'object' && Object.keys(errorMessages).length ? errorMessages : undefined;
}; };

export { createValidator };
