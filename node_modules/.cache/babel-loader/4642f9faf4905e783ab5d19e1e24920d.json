{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\src\\\\module\\\\ChatMessages\\\\ChatMessages.tsx\";\nimport React, { useState, useCallback, createContext, useContext, useEffect } from 'react';\nimport { ReplaySubject } from 'rxjs';\nconst chatMessagesSubject = new ReplaySubject();\nconst ChatMessagesContext = createContext(chatMessagesSubject);\nexport const ChatMessagesProvider = ({\n  children\n}) => {\n  return /*#__PURE__*/React.createElement(ChatMessagesContext.Provider, {\n    value: chatMessagesSubject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }, children);\n};\nexport const useChatMessages = () => {\n  const chatMessagesSubject = useContext(ChatMessagesContext);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        chatMessages = _useState2[0],\n        setChatMessages = _useState2[1];\n\n  useEffect(() => {\n    const subscription = chatMessagesSubject.subscribe(chatMessage => {\n      setChatMessages(chatMessages => [...chatMessages, chatMessage]);\n    });\n    return () => subscription.unsubscribe();\n  }, [chatMessagesSubject, setChatMessages]);\n  const sendChatMessage = useCallback(chatMessage => {\n    chatMessagesSubject.next(chatMessage);\n  }, [chatMessagesSubject]);\n  return {\n    chatMessages,\n    sendChatMessage\n  };\n};","map":{"version":3,"sources":["C:/Users/NhanLee/Downloads/p2p-chat/example/src/module/ChatMessages/ChatMessages.tsx"],"names":["React","useState","useCallback","createContext","useContext","useEffect","ReplaySubject","chatMessagesSubject","ChatMessagesContext","ChatMessagesProvider","children","useChatMessages","chatMessages","setChatMessages","subscription","subscribe","chatMessage","unsubscribe","sendChatMessage","next"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,aAAvC,EAA0DC,UAA1D,EAAsEC,SAAtE,QAAuF,OAAvF;AACA,SAASC,aAAT,QAA8B,MAA9B;AAgBA,MAAMC,mBAAmB,GAAG,IAAID,aAAJ,EAA5B;AAEA,MAAME,mBAAmB,GAAGL,aAAa,CAACI,mBAAD,CAAzC;AAEA,OAAO,MAAME,oBAAwB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxD,sBAAO,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEH,mBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2DG,QAA3D,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,QAAMJ,mBAAmB,GAAGH,UAAU,CAACI,mBAAD,CAAtC;;AADmC,oBAEKP,QAAQ,CAAoB,EAApB,CAFb;AAAA;AAAA,QAE5BW,YAF4B;AAAA,QAEdC,eAFc;;AAInCR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,YAAY,GAAGP,mBAAmB,CAACQ,SAApB,CAA+BC,WAAD,IAAiB;AAClEH,MAAAA,eAAe,CAAED,YAAD,IAAkB,CAAC,GAAGA,YAAJ,EAAkBI,WAAlB,CAAnB,CAAf;AACD,KAFoB,CAArB;AAIA,WAAO,MAAMF,YAAY,CAACG,WAAb,EAAb;AACD,GANQ,EAMN,CAACV,mBAAD,EAAsBM,eAAtB,CANM,CAAT;AAQA,QAAMK,eAAe,GAAGhB,WAAW,CAChCc,WAAD,IAAkC;AAChCT,IAAAA,mBAAmB,CAACY,IAApB,CAAyBH,WAAzB;AACD,GAHgC,EAIjC,CAACT,mBAAD,CAJiC,CAAnC;AAOA,SAAO;AAAEK,IAAAA,YAAF;AAAgBM,IAAAA;AAAhB,GAAP;AACD,CApBM","sourcesContent":["import React, { useState, useCallback, createContext, FC, useContext, useEffect } from 'react';\r\nimport { ReplaySubject } from 'rxjs';\r\n\r\nimport { ChatMessageType } from '../../types/ChatMessageType';\r\n\r\nexport interface SendFileInfoProps {\r\n  fileId: string;\r\n  fileName: string;\r\n  fileSize: number;\r\n}\r\n\r\nexport interface SendFileChunkProps {\r\n  fileId: string;\r\n  fileChunkIndex: number;\r\n  fileChunk: string;\r\n}\r\n\r\nconst chatMessagesSubject = new ReplaySubject<ChatMessageType>();\r\n\r\nconst ChatMessagesContext = createContext(chatMessagesSubject);\r\n\r\nexport const ChatMessagesProvider: FC = ({ children }) => {\r\n  return <ChatMessagesContext.Provider value={chatMessagesSubject}>{children}</ChatMessagesContext.Provider>;\r\n};\r\n\r\nexport const useChatMessages = () => {\r\n  const chatMessagesSubject = useContext(ChatMessagesContext);\r\n  const [chatMessages, setChatMessages] = useState<ChatMessageType[]>([]);\r\n\r\n  useEffect(() => {\r\n    const subscription = chatMessagesSubject.subscribe((chatMessage) => {\r\n      setChatMessages((chatMessages) => [...chatMessages, chatMessage]);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [chatMessagesSubject, setChatMessages]);\r\n\r\n  const sendChatMessage = useCallback(\r\n    (chatMessage: ChatMessageType) => {\r\n      chatMessagesSubject.next(chatMessage);\r\n    },\r\n    [chatMessagesSubject],\r\n  );\r\n\r\n  return { chatMessages, sendChatMessage };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}