{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\src\\\\components\\\\FileSharing\\\\FileSharing.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment, useRef, memo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport shortid from 'shortid';\nimport { Button } from '../Button/Button';\nimport { useChat } from '../../module/useChat/useChat';\nimport { arrayBufferToString } from '../../util/arrayBufferConverter';\nconst Input = styled.input(_templateObject());\nconst StyledButton = styled(Button)(_templateObject2());\nexport const FileSharing = memo(function FileSharing({\n  className\n}) {\n  const _useChat = useChat(),\n        sendFileInfo = _useChat.sendFileInfo,\n        sendFileChunk = _useChat.sendFileChunk;\n\n  const inputRef = useRef();\n  const handleButtonClick = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (!inputRef.current) return;\n    inputRef.current.click();\n  }, [inputRef]);\n  const handleInputChange = useCallback(event => {\n    var _event$target$files;\n\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n    const fileId = shortid.generate();\n    const BYTES_PER_CHUNK = 1200;\n    const fileReader = new FileReader();\n    let currentChunk = 0;\n\n    const readNextChunk = () => {\n      const start = BYTES_PER_CHUNK * currentChunk;\n      const end = Math.min(file.size, start + BYTES_PER_CHUNK);\n      fileReader.readAsArrayBuffer(file.slice(start, end));\n    };\n\n    fileReader.onload = () => {\n      if (!(fileReader.result instanceof ArrayBuffer)) return;\n      sendFileChunk({\n        fileId,\n        fileChunkIndex: currentChunk,\n        fileChunk: arrayBufferToString(fileReader.result)\n      });\n      currentChunk++;\n\n      if (BYTES_PER_CHUNK * currentChunk < file.size) {\n        readNextChunk();\n      }\n    };\n\n    sendFileInfo({\n      fileId,\n      fileName: file.name,\n      fileSize: file.size\n    });\n    readNextChunk();\n  }, [sendFileInfo, sendFileChunk]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    ref: inputRef,\n    type: \"file\",\n    name: \"file\",\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledButton, {\n    className: className,\n    title: \"Upload\",\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"paperclip emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDCCE\")));\n});","map":{"version":3,"sources":["C:/Users/NhanLee/Downloads/p2p-chat/example/src/components/FileSharing/FileSharing.tsx"],"names":["React","Fragment","useRef","memo","useCallback","styled","shortid","Button","useChat","arrayBufferToString","Input","input","StyledButton","FileSharing","className","sendFileInfo","sendFileChunk","inputRef","handleButtonClick","event","preventDefault","stopPropagation","current","click","handleInputChange","file","target","files","fileId","generate","BYTES_PER_CHUNK","fileReader","FileReader","currentChunk","readNextChunk","start","end","Math","min","size","readAsArrayBuffer","slice","onload","result","ArrayBuffer","fileChunkIndex","fileChunk","fileName","name","fileSize"],"mappings":"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","sourcesContent":["import React, { Fragment, useRef, FC, ChangeEventHandler, MouseEventHandler, memo, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport shortid from 'shortid';\r\n\r\nimport { Button } from '../Button/Button';\r\nimport { useChat } from '../../module/useChat/useChat';\r\nimport { arrayBufferToString } from '../../util/arrayBufferConverter';\r\n\r\nexport interface FileSharingProps {\r\n  className?: string;\r\n}\r\n\r\nconst Input = styled.input`\r\n  display: none;\r\n`;\r\nconst StyledButton = styled(Button)``;\r\n\r\nexport const FileSharing: FC<FileSharingProps> = memo(function FileSharing({ className }) {\r\n  const { sendFileInfo, sendFileChunk } = useChat();\r\n  const inputRef = useRef<HTMLInputElement>() as React.MutableRefObject<HTMLInputElement>;\r\n\r\n  const handleButtonClick: MouseEventHandler<HTMLButtonElement> = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      if (!inputRef.current) return;\r\n      inputRef.current.click();\r\n    },\r\n    [inputRef],\r\n  );\r\n\r\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = useCallback(\r\n    (event) => {\r\n      const file = event.target.files?.[0];\r\n\r\n      if (!file) return;\r\n\r\n      const fileId = shortid.generate();\r\n      const BYTES_PER_CHUNK = 1200;\r\n      const fileReader = new FileReader();\r\n      let currentChunk = 0;\r\n\r\n      const readNextChunk = () => {\r\n        const start = BYTES_PER_CHUNK * currentChunk;\r\n        const end = Math.min(file.size, start + BYTES_PER_CHUNK);\r\n        fileReader.readAsArrayBuffer(file.slice(start, end));\r\n      };\r\n\r\n      fileReader.onload = () => {\r\n        if (!(fileReader.result instanceof ArrayBuffer)) return;\r\n\r\n        sendFileChunk({ fileId, fileChunkIndex: currentChunk, fileChunk: arrayBufferToString(fileReader.result) });\r\n        currentChunk++;\r\n\r\n        if (BYTES_PER_CHUNK * currentChunk < file.size) {\r\n          readNextChunk();\r\n        }\r\n      };\r\n\r\n      sendFileInfo({\r\n        fileId,\r\n        fileName: file.name,\r\n        fileSize: file.size,\r\n      });\r\n\r\n      readNextChunk();\r\n    },\r\n    [sendFileInfo, sendFileChunk],\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <Input ref={inputRef} type=\"file\" name=\"file\" onChange={handleInputChange} />\r\n      <StyledButton className={className} title=\"Upload\" onClick={handleButtonClick}>\r\n        <span role=\"img\" aria-label=\"paperclip emoji\">\r\n          ðŸ“Ž\r\n        </span>\r\n      </StyledButton>\r\n    </Fragment>\r\n  );\r\n});\r\n"]},"metadata":{},"sourceType":"module"}