{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nconst CHANNEL_LABEL = 'P2P_CHAT_CHANNEL_LABEL';\nexport function createPeerConnection({\n  remoteDescription,\n  iceServers = [],\n  onChannelOpen,\n  onMessageReceived\n}) {\n  const peerConnection = new RTCPeerConnection({\n    iceServers\n  });\n  let channelInstance; // peerConnection.oniceconnectionstatechange = () => {\n  //   if (peerConnection.iceConnectionState === 'failed' || peerConnection.iceConnectionState === 'disconnected') {\n  //     createOffer();\n  //   }\n  // };\n\n  function setupChannelAsAHost() {\n    try {\n      channelInstance = peerConnection.createDataChannel(CHANNEL_LABEL);\n\n      channelInstance.onopen = function () {\n        onChannelOpen();\n      };\n\n      channelInstance.onmessage = function (event) {\n        onMessageReceived(event.data);\n      };\n    } catch (e) {\n      console.error('No data channel (peerConnection)', e);\n    }\n  }\n\n  function createOffer() {\n    return _createOffer.apply(this, arguments);\n  }\n\n  function _createOffer() {\n    _createOffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var description;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return peerConnection.createOffer();\n\n          case 2:\n            description = _context.sent;\n            peerConnection.setLocalDescription(description);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _createOffer.apply(this, arguments);\n  }\n\n  function setupChannelAsASlave() {\n    peerConnection.ondatachannel = function ({\n      channel\n    }) {\n      channelInstance = channel;\n\n      channelInstance.onopen = function () {\n        onChannelOpen();\n      };\n\n      channelInstance.onmessage = function (event) {\n        onMessageReceived(event.data);\n      };\n    };\n  }\n\n  function createAnswer(_x) {\n    return _createAnswer.apply(this, arguments);\n  }\n\n  function _createAnswer() {\n    _createAnswer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(remoteDescription) {\n      var description;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return peerConnection.setRemoteDescription(JSON.parse(remoteDescription));\n\n          case 2:\n            _context2.next = 4;\n            return peerConnection.createAnswer();\n\n          case 4:\n            description = _context2.sent;\n            peerConnection.setLocalDescription(description);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _createAnswer.apply(this, arguments);\n  }\n\n  function setAnswerDescription(answerDescription) {\n    peerConnection.setRemoteDescription(JSON.parse(answerDescription));\n  }\n\n  function sendMessage(message) {\n    if (channelInstance) {\n      channelInstance.send(message);\n    }\n  }\n\n  return new Promise(res => {\n    peerConnection.onicecandidate = function (e) {\n      if (e.candidate === null && peerConnection.localDescription) {\n        peerConnection.localDescription.sdp.replace('b=AS:30', 'b=AS:1638400');\n        res({\n          localDescription: JSON.stringify(peerConnection.localDescription),\n          setAnswerDescription,\n          sendMessage\n        });\n      }\n    };\n\n    if (!remoteDescription) {\n      setupChannelAsAHost();\n      createOffer();\n    } else {\n      setupChannelAsASlave();\n      createAnswer(remoteDescription);\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/NhanLee/Downloads/p2p-chat/example/src/typescript-lib.ts"],"names":["CHANNEL_LABEL","createPeerConnection","remoteDescription","iceServers","onChannelOpen","onMessageReceived","peerConnection","RTCPeerConnection","channelInstance","setupChannelAsAHost","createDataChannel","onopen","onmessage","event","data","e","console","error","createOffer","description","setLocalDescription","setupChannelAsASlave","ondatachannel","channel","createAnswer","setRemoteDescription","JSON","parse","setAnswerDescription","answerDescription","sendMessage","message","send","Promise","res","onicecandidate","candidate","localDescription","sdp","replace","stringify"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\r\nconst CHANNEL_LABEL = 'P2P_CHAT_CHANNEL_LABEL';\r\n\r\nexport interface CreatePeerConnectionProps {\r\n  remoteDescription?: string;\r\n  iceServers?: RTCIceServer[];\r\n  onChannelOpen: () => any;\r\n  onMessageReceived: (message: string) => any;\r\n}\r\n\r\nexport interface CreatePeerConnectionResponse {\r\n  localDescription: string;\r\n  setAnswerDescription: (answerDescription: string) => void;\r\n  sendMessage: (message: string) => void;\r\n}\r\n\r\nexport function createPeerConnection({\r\n  remoteDescription,\r\n  iceServers = [],\r\n  onChannelOpen,\r\n  onMessageReceived,\r\n}: CreatePeerConnectionProps): Promise<CreatePeerConnectionResponse> {\r\n  const peerConnection = new RTCPeerConnection({\r\n    iceServers,\r\n  });\r\n  let channelInstance: RTCDataChannel;\r\n\r\n  // peerConnection.oniceconnectionstatechange = () => {\r\n  //   if (peerConnection.iceConnectionState === 'failed' || peerConnection.iceConnectionState === 'disconnected') {\r\n  //     createOffer();\r\n  //   }\r\n  // };\r\n\r\n  function setupChannelAsAHost() {\r\n    try {\r\n      channelInstance = peerConnection.createDataChannel(CHANNEL_LABEL);\r\n\r\n      channelInstance.onopen = function () {\r\n        onChannelOpen();\r\n      };\r\n\r\n      channelInstance.onmessage = function (event) {\r\n        onMessageReceived(event.data);\r\n      };\r\n    } catch (e) {\r\n      console.error('No data channel (peerConnection)', e);\r\n    }\r\n  }\r\n\r\n  async function createOffer() {\r\n    const description = await peerConnection.createOffer();\r\n    peerConnection.setLocalDescription(description);\r\n  }\r\n\r\n  function setupChannelAsASlave() {\r\n    peerConnection.ondatachannel = function ({ channel }) {\r\n      channelInstance = channel;\r\n      channelInstance.onopen = function () {\r\n        onChannelOpen();\r\n      };\r\n\r\n      channelInstance.onmessage = function (event) {\r\n        onMessageReceived(event.data);\r\n      };\r\n    };\r\n  }\r\n\r\n  async function createAnswer(remoteDescription: string) {\r\n    await peerConnection.setRemoteDescription(JSON.parse(remoteDescription));\r\n    const description = await peerConnection.createAnswer();\r\n    peerConnection.setLocalDescription(description);\r\n  }\r\n\r\n  function setAnswerDescription(answerDescription: string) {\r\n    peerConnection.setRemoteDescription(JSON.parse(answerDescription));\r\n  }\r\n\r\n  function sendMessage(message: string) {\r\n    if (channelInstance) {\r\n      channelInstance.send(message);\r\n    }\r\n  }\r\n\r\n  return new Promise((res) => {\r\n    peerConnection.onicecandidate = function (e) {\r\n      if (e.candidate === null && peerConnection.localDescription) {\r\n        peerConnection.localDescription.sdp.replace('b=AS:30', 'b=AS:1638400');\r\n        res({\r\n          localDescription: JSON.stringify(peerConnection.localDescription),\r\n          setAnswerDescription,\r\n          sendMessage,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (!remoteDescription) {\r\n      setupChannelAsAHost();\r\n      createOffer();\r\n    } else {\r\n      setupChannelAsASlave();\r\n      createAnswer(remoteDescription);\r\n    }\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}