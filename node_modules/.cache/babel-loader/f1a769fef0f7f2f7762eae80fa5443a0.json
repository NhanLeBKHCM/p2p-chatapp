{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\src\\\\module\\\\PeerConnection\\\\PeerConnection.tsx\";\nimport React, { createContext, useState, useRef, useCallback, useEffect, useContext, useMemo } from 'react';\nimport { Subject } from 'rxjs';\nimport { generateKey, decrypt, encrypt } from '../../util/encryption';\nimport { createPeerConnection } from '../../typescript-lib';\nexport let PEER_CONNECTION_MODE;\n\n(function (PEER_CONNECTION_MODE) {\n  PEER_CONNECTION_MODE[\"HOST\"] = \"HOST\";\n  PEER_CONNECTION_MODE[\"SLAVE\"] = \"SLAVE\";\n})(PEER_CONNECTION_MODE || (PEER_CONNECTION_MODE = {}));\n\nconst iceServers = [{\n  urls: 'stun:stun.l.google.com:19302'\n} // {\n//   urls: 'turn:turn.anyfirewall.com:443?transport=tcp',\n//   username: 'webrtc',\n//   credential: 'webrtc',\n// },\n];\nconst peerConnectionSubject = new Subject();\nconst PeerConnectionContext = createContext({});\nexport const PeerConnectionProvider = ({\n  children\n}) => {\n  const _useState = useState(undefined),\n        _useState2 = _slicedToArray(_useState, 2),\n        mode = _useState2[0],\n        setMode = _useState2[1];\n\n  const encryptionKeyRef = useRef(generateKey());\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        localDescription = _useState4[0],\n        setLocalDescription = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isConnected = _useState6[0],\n        setIsConnected = _useState6[1];\n\n  const peerConnectionRef = useRef();\n  const onChannelOpen = useCallback(() => setIsConnected(true), [setIsConnected]);\n  const onMessageReceived = useCallback(messageString => {\n    try {\n      const decryptedMessageString = decrypt(messageString, encryptionKeyRef.current);\n      const message = JSON.parse(decryptedMessageString);\n      peerConnectionSubject.next(message);\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n  const startAsHost = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(typeof mode !== 'undefined')) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          setMode(PEER_CONNECTION_MODE.HOST);\n          _context.next = 5;\n          return createPeerConnection({\n            iceServers,\n            onMessageReceived,\n            onChannelOpen\n          });\n\n        case 5:\n          peerConnectionRef.current = _context.sent;\n          setLocalDescription(Base64.encode(peerConnectionRef.current.localDescription));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  })), [mode, setMode, onMessageReceived, onChannelOpen, setLocalDescription]);\n  const startAsSlave = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connectionDescription) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof mode !== 'undefined')) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            setMode(PEER_CONNECTION_MODE.SLAVE);\n            encryptionKeyRef.current = connectionDescription.encryptionKey;\n            _context2.next = 6;\n            return createPeerConnection({\n              iceServers,\n              remoteDescription: Base64.decode(connectionDescription.description),\n              onMessageReceived,\n              onChannelOpen\n            });\n\n          case 6:\n            peerConnectionRef.current = _context2.sent;\n            console.log('peerConnectionRef.current.localDescription', peerConnectionRef.current.localDescription);\n            setLocalDescription(Base64.encode(peerConnectionRef.current.localDescription));\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [mode, setMode, onMessageReceived, onChannelOpen, setLocalDescription]);\n  const setRemoteConnectionDescription = useCallback(connectionDescription => {\n    if (!peerConnectionRef.current) return;\n    peerConnectionRef.current.setAnswerDescription(Base64.decode(connectionDescription.description));\n  }, []);\n  const sendMessage = useCallback(message => {\n    if (!peerConnectionRef.current) return;\n    const messageString = JSON.stringify(message);\n    const encryptedMessageString = encrypt(messageString, encryptionKeyRef.current);\n    peerConnectionRef.current.sendMessage(encryptedMessageString);\n  }, []);\n  const localConnectionDescription = useMemo(() => localDescription && encryptionKeyRef.current ? {\n    description: localDescription,\n    encryptionKey: encryptionKeyRef.current\n  } : undefined, [localDescription]);\n  return /*#__PURE__*/React.createElement(PeerConnectionContext.Provider, {\n    value: {\n      mode,\n      isConnected,\n      localConnectionDescription,\n      startAsHost,\n      startAsSlave,\n      setRemoteConnectionDescription,\n      sendMessage,\n      peerConnectionSubject\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const usePeerConnection = () => {\n  const _useContext = useContext(PeerConnectionContext),\n        mode = _useContext.mode,\n        isConnected = _useContext.isConnected,\n        localConnectionDescription = _useContext.localConnectionDescription,\n        startAsHost = _useContext.startAsHost,\n        startAsSlave = _useContext.startAsSlave,\n        setRemoteConnectionDescription = _useContext.setRemoteConnectionDescription,\n        sendMessage = _useContext.sendMessage;\n\n  return {\n    mode,\n    isConnected,\n    localConnectionDescription,\n    startAsHost,\n    startAsSlave,\n    setRemoteConnectionDescription,\n    sendMessage: sendMessage\n  };\n};\nexport const usePeerConnectionSubscription = onMessageReceived => {\n  const _useContext2 = useContext(PeerConnectionContext),\n        peerConnectionSubject = _useContext2.peerConnectionSubject;\n\n  useEffect(() => {\n    const subscription = peerConnectionSubject.subscribe(onMessageReceived);\n    return () => subscription.unsubscribe();\n  }, [peerConnectionSubject, onMessageReceived]);\n};","map":{"version":3,"sources":["C:/Users/NhanLee/Downloads/p2p-chat/example/src/module/PeerConnection/PeerConnection.tsx"],"names":["React","createContext","useState","useRef","useCallback","useEffect","useContext","useMemo","Subject","generateKey","decrypt","encrypt","createPeerConnection","PEER_CONNECTION_MODE","iceServers","urls","peerConnectionSubject","PeerConnectionContext","PeerConnectionProvider","children","undefined","mode","setMode","encryptionKeyRef","localDescription","setLocalDescription","isConnected","setIsConnected","peerConnectionRef","onChannelOpen","onMessageReceived","messageString","decryptedMessageString","current","message","JSON","parse","next","error","console","startAsHost","HOST","Base64","encode","startAsSlave","connectionDescription","SLAVE","encryptionKey","remoteDescription","decode","description","log","setRemoteConnectionDescription","setAnswerDescription","sendMessage","stringify","encryptedMessageString","localConnectionDescription","usePeerConnection","usePeerConnectionSubscription","subscription","subscribe","unsubscribe"],"mappings":"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","sourcesContent":["import React, { createContext, FC, useState, useRef, useCallback, useEffect, useContext, useMemo } from 'react';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { generateKey, decrypt, encrypt } from '../../util/encryption';\r\nimport { createPeerConnection, CreatePeerConnectionResponse } from '../../typescript-lib';\r\n\r\nexport type ConnectionDescription = {\r\n  description: string;\r\n  encryptionKey: string;\r\n};\r\nexport enum PEER_CONNECTION_MODE {\r\n  HOST = 'HOST',\r\n  SLAVE = 'SLAVE',\r\n}\r\n\r\nconst iceServers: RTCIceServer[] = [\r\n  {\r\n    urls: 'stun:stun.l.google.com:19302',\r\n  },\r\n  // {\r\n  //   urls: 'turn:turn.anyfirewall.com:443?transport=tcp',\r\n  //   username: 'webrtc',\r\n  //   credential: 'webrtc',\r\n  // },\r\n];\r\n\r\nconst peerConnectionSubject = new Subject<any>();\r\n\r\ninterface PeerConnectionContextValue {\r\n  mode: PEER_CONNECTION_MODE | undefined;\r\n  isConnected: boolean;\r\n  localConnectionDescription: ConnectionDescription | undefined;\r\n  startAsHost: () => void;\r\n  startAsSlave: (connectionDescription: ConnectionDescription) => void;\r\n  setRemoteConnectionDescription: (connectionDescription: ConnectionDescription) => void;\r\n  sendMessage: (message: any) => void;\r\n  peerConnectionSubject: typeof peerConnectionSubject;\r\n}\r\n\r\nconst PeerConnectionContext = createContext<PeerConnectionContextValue>({} as PeerConnectionContextValue);\r\n\r\nexport const PeerConnectionProvider: FC = ({ children }) => {\r\n  const [mode, setMode] = useState<PEER_CONNECTION_MODE | undefined>(undefined);\r\n  const encryptionKeyRef = useRef(generateKey());\r\n  const [localDescription, setLocalDescription] = useState<string | undefined>();\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const peerConnectionRef = useRef<CreatePeerConnectionResponse>();\r\n\r\n  const onChannelOpen = useCallback(() => setIsConnected(true), [setIsConnected]);\r\n\r\n  const onMessageReceived = useCallback((messageString: string) => {\r\n    try {\r\n      const decryptedMessageString = decrypt(messageString, encryptionKeyRef.current);\r\n      const message = JSON.parse(decryptedMessageString);\r\n      peerConnectionSubject.next(message);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, []);\r\n\r\n  const startAsHost = useCallback(async () => {\r\n    if (typeof mode !== 'undefined') return;\r\n\r\n    setMode(PEER_CONNECTION_MODE.HOST);\r\n    peerConnectionRef.current = await createPeerConnection({\r\n      iceServers,\r\n      onMessageReceived,\r\n      onChannelOpen,\r\n    });\r\n\r\n    setLocalDescription(Base64.encode(peerConnectionRef.current.localDescription));\r\n  }, [mode, setMode, onMessageReceived, onChannelOpen, setLocalDescription]);\r\n\r\n  const startAsSlave = useCallback(\r\n    async (connectionDescription: ConnectionDescription) => {\r\n      if (typeof mode !== 'undefined') return;\r\n\r\n      setMode(PEER_CONNECTION_MODE.SLAVE);\r\n      encryptionKeyRef.current = connectionDescription.encryptionKey;\r\n\r\n      peerConnectionRef.current = await createPeerConnection({\r\n        iceServers,\r\n        remoteDescription: Base64.decode(connectionDescription.description),\r\n        onMessageReceived,\r\n        onChannelOpen,\r\n      });\r\n      console.log('peerConnectionRef.current.localDescription', peerConnectionRef.current.localDescription);\r\n      setLocalDescription(Base64.encode(peerConnectionRef.current.localDescription));\r\n    },\r\n    [mode, setMode, onMessageReceived, onChannelOpen, setLocalDescription],\r\n  );\r\n\r\n  const setRemoteConnectionDescription = useCallback((connectionDescription: ConnectionDescription) => {\r\n    if (!peerConnectionRef.current) return;\r\n\r\n    peerConnectionRef.current.setAnswerDescription(Base64.decode(connectionDescription.description));\r\n  }, []);\r\n\r\n  const sendMessage = useCallback((message) => {\r\n    if (!peerConnectionRef.current) return;\r\n\r\n    const messageString = JSON.stringify(message);\r\n    const encryptedMessageString = encrypt(messageString, encryptionKeyRef.current);\r\n\r\n    peerConnectionRef.current.sendMessage(encryptedMessageString);\r\n  }, []);\r\n\r\n  const localConnectionDescription: ConnectionDescription | undefined = useMemo(\r\n    () =>\r\n      localDescription && encryptionKeyRef.current\r\n        ? {\r\n            description: localDescription,\r\n            encryptionKey: encryptionKeyRef.current,\r\n          }\r\n        : undefined,\r\n    [localDescription],\r\n  );\r\n\r\n  return (\r\n    <PeerConnectionContext.Provider\r\n      value={{\r\n        mode,\r\n        isConnected,\r\n        localConnectionDescription,\r\n        startAsHost,\r\n        startAsSlave,\r\n        setRemoteConnectionDescription,\r\n        sendMessage,\r\n        peerConnectionSubject,\r\n      }}\r\n    >\r\n      {children}\r\n    </PeerConnectionContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePeerConnection = <T extends any>() => {\r\n  const {\r\n    mode,\r\n    isConnected,\r\n    localConnectionDescription,\r\n    startAsHost,\r\n    startAsSlave,\r\n    setRemoteConnectionDescription,\r\n    sendMessage,\r\n  } = useContext(PeerConnectionContext);\r\n\r\n  return {\r\n    mode,\r\n    isConnected,\r\n    localConnectionDescription,\r\n    startAsHost,\r\n    startAsSlave,\r\n    setRemoteConnectionDescription,\r\n    sendMessage: sendMessage as (message: T) => void,\r\n  };\r\n};\r\n\r\nexport const usePeerConnectionSubscription = <T extends any>(onMessageReceived: (message: T) => void) => {\r\n  const { peerConnectionSubject } = useContext(PeerConnectionContext);\r\n\r\n  useEffect(() => {\r\n    const subscription = (peerConnectionSubject as Subject<T>).subscribe(onMessageReceived);\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [peerConnectionSubject, onMessageReceived]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}