{"ast":null,"code":"import CryptoAES from 'crypto-js/aes';\nimport CryptoENCUtf8 from 'crypto-js/enc-utf8';\nimport { lib as CryptoLib } from 'crypto-js';\nimport CryptoPBKDF2 from 'crypto-js/pbkdf2';\nexport function encrypt(string, key) {\n  return CryptoAES.encrypt(string, key).toString();\n}\nexport function decrypt(string, key) {\n  return CryptoAES.decrypt(string, key).toString(CryptoENCUtf8);\n}\nexport function generateKey() {\n  const passphrase = CryptoLib.WordArray.random(128 / 8);\n  const salt = CryptoLib.WordArray.random(128 / 8);\n  return CryptoPBKDF2(passphrase, salt, {\n    keySize: 256 / 32,\n    iterations: 1000\n  }).toString();\n}","map":{"version":3,"sources":["C:/Users/NhanLee/Downloads/p2p-chat/example/src/util/encryption.ts"],"names":["CryptoAES","CryptoENCUtf8","lib","CryptoLib","CryptoPBKDF2","encrypt","string","key","toString","decrypt","generateKey","passphrase","WordArray","random","salt","keySize","iterations"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,eAAtB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,GAAG,IAAIC,SAAhB,QAAiC,WAAjC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAiCC,GAAjC,EAAsD;AAC3D,SAAOP,SAAS,CAACK,OAAV,CAAkBC,MAAlB,EAA0BC,GAA1B,EAA+BC,QAA/B,EAAP;AACD;AAED,OAAO,SAASC,OAAT,CAAiBH,MAAjB,EAAiCC,GAAjC,EAAsD;AAC3D,SAAOP,SAAS,CAACS,OAAV,CAAkBH,MAAlB,EAA0BC,GAA1B,EAA+BC,QAA/B,CAAwCP,aAAxC,CAAP;AACD;AAED,OAAO,SAASS,WAAT,GAA+B;AACpC,QAAMC,UAAU,GAAGR,SAAS,CAACS,SAAV,CAAoBC,MAApB,CAA2B,MAAM,CAAjC,CAAnB;AACA,QAAMC,IAAI,GAAGX,SAAS,CAACS,SAAV,CAAoBC,MAApB,CAA2B,MAAM,CAAjC,CAAb;AACA,SAAOT,YAAY,CAACO,UAAD,EAAaG,IAAb,EAAmB;AAAEC,IAAAA,OAAO,EAAE,MAAM,EAAjB;AAAqBC,IAAAA,UAAU,EAAE;AAAjC,GAAnB,CAAZ,CAAwER,QAAxE,EAAP;AACD","sourcesContent":["import CryptoAES from 'crypto-js/aes';\r\nimport CryptoENCUtf8 from 'crypto-js/enc-utf8';\r\nimport { lib as CryptoLib } from 'crypto-js';\r\nimport CryptoPBKDF2 from 'crypto-js/pbkdf2';\r\n\r\nexport function encrypt(string: string, key: string): string {\r\n  return CryptoAES.encrypt(string, key).toString();\r\n}\r\n\r\nexport function decrypt(string: string, key: string): string {\r\n  return CryptoAES.decrypt(string, key).toString(CryptoENCUtf8);\r\n}\r\n\r\nexport function generateKey(): string {\r\n  const passphrase = CryptoLib.WordArray.random(128 / 8);\r\n  const salt = CryptoLib.WordArray.random(128 / 8);\r\n  return CryptoPBKDF2(passphrase, salt, { keySize: 256 / 32, iterations: 1000 }).toString();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}