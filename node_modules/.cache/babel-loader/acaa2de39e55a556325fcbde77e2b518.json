{"ast":null,"code":"import { useCallback } from 'react';\nimport shortid from 'shortid';\nimport { usePeerConnection, usePeerConnectionSubscription } from '../PeerConnection/PeerConnection';\nimport { useOnFileBufferReceived } from '../FileBuffers/FileBuffers';\nimport { MESSAGE_SENDER } from '../../types/MessageSenderEnum';\nimport { MESSAGE_TYPE } from '../../types/MessageTypeEnum';\nimport { useChatMessages } from '../ChatMessages/ChatMessages';\nexport const useChat = () => {\n  const _useOnFileBufferRecei = useOnFileBufferReceived(),\n        onFileInfoUploaded = _useOnFileBufferRecei.onFileInfoUploaded,\n        onFileChunkUploaded = _useOnFileBufferRecei.onFileChunkUploaded;\n\n  const _useChatMessages = useChatMessages(),\n        chatMessages = _useChatMessages.chatMessages,\n        sendChatMessage = _useChatMessages.sendChatMessage;\n\n  const _usePeerConnection = usePeerConnection(),\n        mode = _usePeerConnection.mode,\n        isConnected = _usePeerConnection.isConnected,\n        localConnectionDescription = _usePeerConnection.localConnectionDescription,\n        startAsHost = _usePeerConnection.startAsHost,\n        startAsSlave = _usePeerConnection.startAsSlave,\n        setRemoteConnectionDescription = _usePeerConnection.setRemoteConnectionDescription,\n        sendMessage = _usePeerConnection.sendMessage;\n\n  const sendTextChatMessage = useCallback(messageText => {\n    const message = {\n      id: shortid.generate(),\n      sender: MESSAGE_SENDER.STRANGER,\n      type: MESSAGE_TYPE.TEXT,\n      timestamp: +new Date(),\n      payload: messageText\n    };\n    sendMessage(message);\n    sendChatMessage({\n      id: message.id,\n      sender: MESSAGE_SENDER.ME,\n      timestamp: message.timestamp,\n      text: message.payload\n    });\n  }, [sendMessage, sendChatMessage]);\n  const sendFileInfo = useCallback(({\n    fileId,\n    fileName,\n    fileSize\n  }) => {\n    const message = {\n      id: shortid.generate(),\n      sender: MESSAGE_SENDER.STRANGER,\n      type: MESSAGE_TYPE.FILE_INFO,\n      timestamp: +new Date(),\n      payload: {\n        fileId,\n        fileName,\n        fileSize\n      }\n    };\n    sendMessage(message);\n    onFileInfoUploaded(message.payload);\n    sendChatMessage({\n      id: message.id,\n      sender: MESSAGE_SENDER.ME,\n      timestamp: message.timestamp,\n      fileId\n    });\n  }, [sendMessage, onFileInfoUploaded, sendChatMessage]);\n  const sendFileChunk = useCallback(({\n    fileId,\n    fileChunkIndex,\n    fileChunk\n  }) => {\n    const message = {\n      id: shortid.generate(),\n      sender: MESSAGE_SENDER.STRANGER,\n      type: MESSAGE_TYPE.FILE_CHUNK,\n      timestamp: +new Date(),\n      payload: {\n        fileId,\n        fileChunkIndex,\n        fileChunk\n      }\n    };\n    sendMessage(message);\n    onFileChunkUploaded(message.payload);\n  }, [sendMessage, onFileChunkUploaded]);\n  return {\n    mode,\n    isConnected,\n    localConnectionDescription,\n    chatMessages,\n    startAsHost,\n    startAsSlave,\n    setRemoteConnectionDescription,\n    sendTextChatMessage,\n    sendFileInfo,\n    sendFileChunk\n  };\n}; // This hook should be used only in one place since it's connecting Chat to PeerConnection\n\nexport const useChatPeerConnectionSubscription = () => {\n  const _useOnFileBufferRecei2 = useOnFileBufferReceived(),\n        onFileInfoReceived = _useOnFileBufferRecei2.onFileInfoReceived,\n        onFileChunkReceived = _useOnFileBufferRecei2.onFileChunkReceived;\n\n  const _useChatMessages2 = useChatMessages(),\n        sendChatMessage = _useChatMessages2.sendChatMessage;\n\n  const onMessageReceived = useCallback(message => {\n    if (message.type === MESSAGE_TYPE.TEXT) {\n      sendChatMessage({\n        id: message.id,\n        sender: MESSAGE_SENDER.STRANGER,\n        timestamp: message.timestamp,\n        text: message.payload\n      });\n    } else if (message.type === MESSAGE_TYPE.FILE_INFO) {\n      onFileInfoReceived(message.payload);\n      sendChatMessage({\n        id: message.id,\n        sender: MESSAGE_SENDER.STRANGER,\n        timestamp: message.timestamp,\n        fileId: message.payload.fileId\n      });\n    } else if (message.type === MESSAGE_TYPE.FILE_CHUNK) {\n      onFileChunkReceived(message.payload);\n    }\n  }, [sendChatMessage, onFileInfoReceived, onFileChunkReceived]);\n  usePeerConnectionSubscription(onMessageReceived);\n};","map":{"version":3,"sources":["C:/Users/NhanLee/Downloads/p2p-chat/example/src/module/useChat/useChat.ts"],"names":["useCallback","shortid","usePeerConnection","usePeerConnectionSubscription","useOnFileBufferReceived","MESSAGE_SENDER","MESSAGE_TYPE","useChatMessages","useChat","onFileInfoUploaded","onFileChunkUploaded","chatMessages","sendChatMessage","mode","isConnected","localConnectionDescription","startAsHost","startAsSlave","setRemoteConnectionDescription","sendMessage","sendTextChatMessage","messageText","message","id","generate","sender","STRANGER","type","TEXT","timestamp","Date","payload","ME","text","sendFileInfo","fileId","fileName","fileSize","FILE_INFO","sendFileChunk","fileChunkIndex","fileChunk","FILE_CHUNK","useChatPeerConnectionSubscription","onFileInfoReceived","onFileChunkReceived","onMessageReceived"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\r\nimport shortid from 'shortid';\r\n\r\nimport { MessageType, MessageTextType, MessageFileInfoType, MessageFileChunkType } from '../../types/MessageType';\r\nimport { usePeerConnection, usePeerConnectionSubscription } from '../PeerConnection/PeerConnection';\r\nimport { useOnFileBufferReceived } from '../FileBuffers/FileBuffers';\r\nimport { MESSAGE_SENDER } from '../../types/MessageSenderEnum';\r\nimport { MESSAGE_TYPE } from '../../types/MessageTypeEnum';\r\nimport { useChatMessages } from '../ChatMessages/ChatMessages';\r\nimport { ChatMessageType } from '../../types/ChatMessageType';\r\n\r\nexport interface SendFileInfoProps {\r\n  fileId: string;\r\n  fileName: string;\r\n  fileSize: number;\r\n}\r\n\r\nexport interface SendFileChunkProps {\r\n  fileId: string;\r\n  fileChunkIndex: number;\r\n  fileChunk: string;\r\n}\r\n\r\nexport const useChat = () => {\r\n  const { onFileInfoUploaded, onFileChunkUploaded } = useOnFileBufferReceived();\r\n  const { chatMessages, sendChatMessage } = useChatMessages();\r\n\r\n  const {\r\n    mode,\r\n    isConnected,\r\n    localConnectionDescription,\r\n    startAsHost,\r\n    startAsSlave,\r\n    setRemoteConnectionDescription,\r\n    sendMessage,\r\n  } = usePeerConnection<ChatMessageType>();\r\n\r\n  const sendTextChatMessage = useCallback(\r\n    (messageText: string) => {\r\n      const message: MessageTextType = {\r\n        id: shortid.generate(),\r\n        sender: MESSAGE_SENDER.STRANGER,\r\n        type: MESSAGE_TYPE.TEXT,\r\n        timestamp: +new Date(),\r\n        payload: messageText,\r\n      };\r\n\r\n      sendMessage(message);\r\n      sendChatMessage({\r\n        id: message.id,\r\n        sender: MESSAGE_SENDER.ME,\r\n        timestamp: message.timestamp,\r\n        text: message.payload,\r\n      });\r\n    },\r\n    [sendMessage, sendChatMessage],\r\n  );\r\n\r\n  const sendFileInfo = useCallback(\r\n    ({ fileId, fileName, fileSize }: SendFileInfoProps) => {\r\n      const message: MessageFileInfoType = {\r\n        id: shortid.generate(),\r\n        sender: MESSAGE_SENDER.STRANGER,\r\n        type: MESSAGE_TYPE.FILE_INFO,\r\n        timestamp: +new Date(),\r\n        payload: {\r\n          fileId,\r\n          fileName,\r\n          fileSize,\r\n        },\r\n      };\r\n\r\n      sendMessage(message);\r\n      onFileInfoUploaded(message.payload);\r\n      sendChatMessage({\r\n        id: message.id,\r\n        sender: MESSAGE_SENDER.ME,\r\n        timestamp: message.timestamp,\r\n        fileId,\r\n      });\r\n    },\r\n    [sendMessage, onFileInfoUploaded, sendChatMessage],\r\n  );\r\n\r\n  const sendFileChunk = useCallback(\r\n    ({ fileId, fileChunkIndex, fileChunk }: SendFileChunkProps) => {\r\n      const message: MessageFileChunkType = {\r\n        id: shortid.generate(),\r\n        sender: MESSAGE_SENDER.STRANGER,\r\n        type: MESSAGE_TYPE.FILE_CHUNK,\r\n        timestamp: +new Date(),\r\n        payload: {\r\n          fileId,\r\n          fileChunkIndex,\r\n          fileChunk,\r\n        },\r\n      };\r\n\r\n      sendMessage(message);\r\n      onFileChunkUploaded(message.payload);\r\n    },\r\n    [sendMessage, onFileChunkUploaded],\r\n  );\r\n\r\n  return {\r\n    mode,\r\n    isConnected,\r\n    localConnectionDescription,\r\n    chatMessages,\r\n    startAsHost,\r\n    startAsSlave,\r\n    setRemoteConnectionDescription,\r\n    sendTextChatMessage,\r\n    sendFileInfo,\r\n    sendFileChunk,\r\n  };\r\n};\r\n\r\n// This hook should be used only in one place since it's connecting Chat to PeerConnection\r\nexport const useChatPeerConnectionSubscription = () => {\r\n  const { onFileInfoReceived, onFileChunkReceived } = useOnFileBufferReceived();\r\n  const { sendChatMessage } = useChatMessages();\r\n\r\n  const onMessageReceived = useCallback(\r\n    (message: MessageType) => {\r\n      if (message.type === MESSAGE_TYPE.TEXT) {\r\n        sendChatMessage({\r\n          id: message.id,\r\n          sender: MESSAGE_SENDER.STRANGER,\r\n          timestamp: message.timestamp,\r\n          text: message.payload,\r\n        });\r\n      } else if (message.type === MESSAGE_TYPE.FILE_INFO) {\r\n        onFileInfoReceived(message.payload);\r\n        sendChatMessage({\r\n          id: message.id,\r\n          sender: MESSAGE_SENDER.STRANGER,\r\n          timestamp: message.timestamp,\r\n          fileId: message.payload.fileId,\r\n        });\r\n      } else if (message.type === MESSAGE_TYPE.FILE_CHUNK) {\r\n        onFileChunkReceived(message.payload);\r\n      }\r\n    },\r\n    [sendChatMessage, onFileInfoReceived, onFileChunkReceived],\r\n  );\r\n\r\n  usePeerConnectionSubscription(onMessageReceived);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}