{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\NhanLee\\\\Downloads\\\\p2p-chat\\\\example\\\\src\\\\module\\\\FileBuffers\\\\FileBuffers.tsx\";\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { Subject } from 'rxjs';\nimport { stringToArrayBuffer } from '../../util/arrayBufferConverter';\nconst fileBuffers = {};\nconst fileBuffersUpdates = new Subject();\nconst contextValue = {\n  fileBuffersUpdates\n};\nconst FileBuffersContext = createContext(contextValue);\nexport const FileBuffersProvider = ({\n  children\n}) => {\n  return /*#__PURE__*/React.createElement(FileBuffersContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, children);\n};\nexport const useOnFileBufferReceived = () => {\n  const _useContext = useContext(FileBuffersContext),\n        fileBuffersUpdates = _useContext.fileBuffersUpdates;\n\n  const onFileInfoUploaded = useCallback(({\n    fileId,\n    fileSize,\n    fileName\n  }) => {\n    const file = fileBuffers[fileId];\n\n    if (!file) {\n      fileBuffers[fileId] = {\n        fileId,\n        fileName,\n        fileSize,\n        mode: 'uploading',\n        receivedSize: 0,\n        receivedBuffer: []\n      };\n    } else {\n      file.fileName = fileName;\n      file.fileSize = fileSize;\n    }\n\n    fileBuffersUpdates.next({\n      fileId\n    });\n  }, [fileBuffersUpdates]);\n  const onFileChunkUploaded = useCallback(({\n    fileId,\n    fileChunk\n  }) => {\n    let file = fileBuffers[fileId];\n\n    if (!file) {\n      fileBuffers[fileId] = {\n        fileId,\n        fileName: '',\n        fileSize: -1,\n        mode: 'uploading',\n        receivedSize: 0,\n        receivedBuffer: []\n      };\n      file = fileBuffers[fileId];\n    }\n\n    const arrayBuffer = stringToArrayBuffer(fileChunk);\n    file.receivedSize += arrayBuffer.byteLength;\n    fileBuffersUpdates.next({\n      fileId\n    });\n  }, [fileBuffersUpdates]);\n  const onFileInfoReceived = useCallback(({\n    fileId,\n    fileSize,\n    fileName\n  }) => {\n    const file = fileBuffers[fileId];\n\n    if (!file) {\n      fileBuffers[fileId] = {\n        fileId,\n        fileName,\n        fileSize,\n        mode: 'downloading',\n        receivedSize: 0,\n        receivedBuffer: []\n      };\n    } else {\n      file.fileName = fileName;\n      file.fileSize = fileSize;\n    }\n\n    fileBuffersUpdates.next({\n      fileId\n    });\n  }, [fileBuffersUpdates]);\n  const onFileChunkReceived = useCallback(({\n    fileId,\n    fileChunkIndex,\n    fileChunk\n  }) => {\n    let file = fileBuffers[fileId];\n\n    if (!file) {\n      fileBuffers[fileId] = {\n        fileId,\n        fileName: '',\n        fileSize: -1,\n        mode: 'downloading',\n        receivedSize: 0,\n        receivedBuffer: []\n      };\n      file = fileBuffers[fileId];\n    }\n\n    const arrayBuffer = stringToArrayBuffer(fileChunk);\n    file.receivedBuffer[fileChunkIndex] = arrayBuffer;\n    file.receivedSize += arrayBuffer.byteLength;\n\n    if (file.receivedSize === file.fileSize) {\n      file.receivedBlob = new Blob(file.receivedBuffer);\n      file.receivedBuffer = [];\n      file.receivedBlobUrl = URL.createObjectURL(file.receivedBlob);\n    }\n\n    fileBuffersUpdates.next({\n      fileId\n    });\n  }, [fileBuffersUpdates]);\n  return {\n    onFileInfoUploaded,\n    onFileChunkUploaded,\n    onFileInfoReceived,\n    onFileChunkReceived\n  };\n};\nexport const useFileBuffer = fileId => {\n  const _useContext2 = useContext(FileBuffersContext),\n        fileBuffersUpdates = _useContext2.fileBuffersUpdates;\n\n  const _useState = useState(undefined),\n        _useState2 = _slicedToArray(_useState, 2),\n        fileName = _useState2[0],\n        setFileName = _useState2[1];\n\n  const _useState3 = useState(undefined),\n        _useState4 = _slicedToArray(_useState3, 2),\n        fileSize = _useState4[0],\n        setFileSize = _useState4[1];\n\n  const _useState5 = useState(undefined),\n        _useState6 = _slicedToArray(_useState5, 2),\n        mode = _useState6[0],\n        setMode = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        receivedSize = _useState8[0],\n        setReceivedSize = _useState8[1];\n\n  const _useState9 = useState(undefined),\n        _useState10 = _slicedToArray(_useState9, 2),\n        receivedBlobUrl = _useState10[0],\n        setReceivedBlobUrl = _useState10[1];\n\n  useEffect(() => {\n    const subscription = fileBuffersUpdates.subscribe(fileBufferUpdate => {\n      if (fileBufferUpdate.fileId === fileId) {\n        const fileBuffer = fileBuffers[fileId];\n        if (!fileBuffer) return;\n        setFileName(fileBuffer.fileName);\n        setFileSize(fileBuffer.fileSize);\n        setMode(fileBuffer.mode);\n        setReceivedSize(fileBuffer.receivedSize);\n        setReceivedBlobUrl(fileBuffer.receivedBlobUrl);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [fileBuffersUpdates, fileId]);\n  return {\n    fileName,\n    fileSize,\n    mode,\n    receivedSize,\n    receivedBlobUrl\n  };\n};","map":{"version":3,"sources":["C:/Users/NhanLee/Downloads/p2p-chat/example/src/module/FileBuffers/FileBuffers.tsx"],"names":["React","createContext","useContext","useState","useEffect","useCallback","Subject","stringToArrayBuffer","fileBuffers","fileBuffersUpdates","contextValue","FileBuffersContext","FileBuffersProvider","children","useOnFileBufferReceived","onFileInfoUploaded","fileId","fileSize","fileName","file","mode","receivedSize","receivedBuffer","next","onFileChunkUploaded","fileChunk","arrayBuffer","byteLength","onFileInfoReceived","onFileChunkReceived","fileChunkIndex","receivedBlob","Blob","receivedBlobUrl","URL","createObjectURL","useFileBuffer","undefined","setFileName","setFileSize","setMode","setReceivedSize","setReceivedBlobUrl","subscription","subscribe","fileBufferUpdate","fileBuffer","unsubscribe"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAAmCC,UAAnC,EAA+CC,QAA/C,EAAyDC,SAAzD,EAAoEC,WAApE,QAAuF,OAAvF;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,SAASC,mBAAT,QAAoC,iCAApC;AAgBA,MAAMC,WAA4B,GAAG,EAArC;AAMA,MAAMC,kBAAkB,GAAG,IAAIH,OAAJ,EAA3B;AAIA,MAAMI,YAAY,GAAG;AAAED,EAAAA;AAAF,CAArB;AAEA,MAAME,kBAAkB,GAAGV,aAAa,CAAyBS,YAAzB,CAAxC;AAEA,OAAO,MAAME,mBAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvD,sBAAO,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEH,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmDG,QAAnD,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,uBAAuB,GAAG,MAAM;AAAA,sBACZZ,UAAU,CAACS,kBAAD,CADE;AAAA,QACnCF,kBADmC,eACnCA,kBADmC;;AAG3C,QAAMM,kBAAkB,GAAGV,WAAW,CACpC,CAAC;AAAEW,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,GAAD,KAAgE;AAC9D,UAAMC,IAAI,GAAGX,WAAW,CAACQ,MAAD,CAAxB;;AAEA,QAAI,CAACG,IAAL,EAAW;AACTX,MAAAA,WAAW,CAACQ,MAAD,CAAX,GAAsB;AACpBA,QAAAA,MADoB;AAEpBE,QAAAA,QAFoB;AAGpBD,QAAAA,QAHoB;AAIpBG,QAAAA,IAAI,EAAE,WAJc;AAKpBC,QAAAA,YAAY,EAAE,CALM;AAMpBC,QAAAA,cAAc,EAAE;AANI,OAAtB;AAQD,KATD,MASO;AACLH,MAAAA,IAAI,CAACD,QAAL,GAAgBA,QAAhB;AACAC,MAAAA,IAAI,CAACF,QAAL,GAAgBA,QAAhB;AACD;;AAEDR,IAAAA,kBAAkB,CAACc,IAAnB,CAAwB;AAAEP,MAAAA;AAAF,KAAxB;AACD,GAnBmC,EAoBpC,CAACP,kBAAD,CApBoC,CAAtC;AAuBA,QAAMe,mBAAmB,GAAGnB,WAAW,CACrC,CAAC;AAAEW,IAAAA,MAAF;AAAUS,IAAAA;AAAV,GAAD,KAAwD;AACtD,QAAIN,IAAI,GAAGX,WAAW,CAACQ,MAAD,CAAtB;;AAEA,QAAI,CAACG,IAAL,EAAW;AACTX,MAAAA,WAAW,CAACQ,MAAD,CAAX,GAAsB;AACpBA,QAAAA,MADoB;AAEpBE,QAAAA,QAAQ,EAAE,EAFU;AAGpBD,QAAAA,QAAQ,EAAE,CAAC,CAHS;AAIpBG,QAAAA,IAAI,EAAE,WAJc;AAKpBC,QAAAA,YAAY,EAAE,CALM;AAMpBC,QAAAA,cAAc,EAAE;AANI,OAAtB;AASAH,MAAAA,IAAI,GAAGX,WAAW,CAACQ,MAAD,CAAlB;AACD;;AAED,UAAMU,WAAW,GAAGnB,mBAAmB,CAACkB,SAAD,CAAvC;AACAN,IAAAA,IAAI,CAACE,YAAL,IAAqBK,WAAW,CAACC,UAAjC;AAEAlB,IAAAA,kBAAkB,CAACc,IAAnB,CAAwB;AAAEP,MAAAA;AAAF,KAAxB;AACD,GArBoC,EAsBrC,CAACP,kBAAD,CAtBqC,CAAvC;AAyBA,QAAMmB,kBAAkB,GAAGvB,WAAW,CACpC,CAAC;AAAEW,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,GAAD,KAAgE;AAC9D,UAAMC,IAAI,GAAGX,WAAW,CAACQ,MAAD,CAAxB;;AAEA,QAAI,CAACG,IAAL,EAAW;AACTX,MAAAA,WAAW,CAACQ,MAAD,CAAX,GAAsB;AACpBA,QAAAA,MADoB;AAEpBE,QAAAA,QAFoB;AAGpBD,QAAAA,QAHoB;AAIpBG,QAAAA,IAAI,EAAE,aAJc;AAKpBC,QAAAA,YAAY,EAAE,CALM;AAMpBC,QAAAA,cAAc,EAAE;AANI,OAAtB;AAQD,KATD,MASO;AACLH,MAAAA,IAAI,CAACD,QAAL,GAAgBA,QAAhB;AACAC,MAAAA,IAAI,CAACF,QAAL,GAAgBA,QAAhB;AACD;;AAEDR,IAAAA,kBAAkB,CAACc,IAAnB,CAAwB;AAAEP,MAAAA;AAAF,KAAxB;AACD,GAnBmC,EAoBpC,CAACP,kBAAD,CApBoC,CAAtC;AAuBA,QAAMoB,mBAAmB,GAAGxB,WAAW,CACrC,CAAC;AAAEW,IAAAA,MAAF;AAAUc,IAAAA,cAAV;AAA0BL,IAAAA;AAA1B,GAAD,KAAwE;AACtE,QAAIN,IAAI,GAAGX,WAAW,CAACQ,MAAD,CAAtB;;AAEA,QAAI,CAACG,IAAL,EAAW;AACTX,MAAAA,WAAW,CAACQ,MAAD,CAAX,GAAsB;AACpBA,QAAAA,MADoB;AAEpBE,QAAAA,QAAQ,EAAE,EAFU;AAGpBD,QAAAA,QAAQ,EAAE,CAAC,CAHS;AAIpBG,QAAAA,IAAI,EAAE,aAJc;AAKpBC,QAAAA,YAAY,EAAE,CALM;AAMpBC,QAAAA,cAAc,EAAE;AANI,OAAtB;AASAH,MAAAA,IAAI,GAAGX,WAAW,CAACQ,MAAD,CAAlB;AACD;;AAED,UAAMU,WAAW,GAAGnB,mBAAmB,CAACkB,SAAD,CAAvC;AACAN,IAAAA,IAAI,CAACG,cAAL,CAAoBQ,cAApB,IAAsCJ,WAAtC;AACAP,IAAAA,IAAI,CAACE,YAAL,IAAqBK,WAAW,CAACC,UAAjC;;AAEA,QAAIR,IAAI,CAACE,YAAL,KAAsBF,IAAI,CAACF,QAA/B,EAAyC;AACvCE,MAAAA,IAAI,CAACY,YAAL,GAAoB,IAAIC,IAAJ,CAASb,IAAI,CAACG,cAAd,CAApB;AACAH,MAAAA,IAAI,CAACG,cAAL,GAAsB,EAAtB;AACAH,MAAAA,IAAI,CAACc,eAAL,GAAuBC,GAAG,CAACC,eAAJ,CAAoBhB,IAAI,CAACY,YAAzB,CAAvB;AACD;;AAEDtB,IAAAA,kBAAkB,CAACc,IAAnB,CAAwB;AAAEP,MAAAA;AAAF,KAAxB;AACD,GA5BoC,EA6BrC,CAACP,kBAAD,CA7BqC,CAAvC;AAgCA,SAAO;AAAEM,IAAAA,kBAAF;AAAsBS,IAAAA,mBAAtB;AAA2CI,IAAAA,kBAA3C;AAA+DC,IAAAA;AAA/D,GAAP;AACD,CA3GM;AA6GP,OAAO,MAAMO,aAAa,GAAIpB,MAAD,IAAoB;AAAA,uBAChBd,UAAU,CAACS,kBAAD,CADM;AAAA,QACvCF,kBADuC,gBACvCA,kBADuC;;AAAA,oBAGfN,QAAQ,CAAqCkC,SAArC,CAHO;AAAA;AAAA,QAGxCnB,QAHwC;AAAA,QAG9BoB,WAH8B;;AAAA,qBAIfnC,QAAQ,CAAqCkC,SAArC,CAJO;AAAA;AAAA,QAIxCpB,QAJwC;AAAA,QAI9BsB,WAJ8B;;AAAA,qBAKvBpC,QAAQ,CAAiCkC,SAAjC,CALe;AAAA;AAAA,QAKxCjB,IALwC;AAAA,QAKlCoB,OALkC;;AAAA,qBAMPrC,QAAQ,CAA6B,CAA7B,CAND;AAAA;AAAA,QAMxCkB,YANwC;AAAA,QAM1BoB,eAN0B;;AAAA,qBAODtC,QAAQ,CAA4CkC,SAA5C,CAPP;AAAA;AAAA,QAOxCJ,eAPwC;AAAA,QAOvBS,kBAPuB;;AAS/CtC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuC,YAAY,GAAGlC,kBAAkB,CAACmC,SAAnB,CAA8BC,gBAAD,IAAsB;AACtE,UAAIA,gBAAgB,CAAC7B,MAAjB,KAA4BA,MAAhC,EAAwC;AACtC,cAAM8B,UAAU,GAAGtC,WAAW,CAACQ,MAAD,CAA9B;AAEA,YAAI,CAAC8B,UAAL,EAAiB;AAEjBR,QAAAA,WAAW,CAACQ,UAAU,CAAC5B,QAAZ,CAAX;AACAqB,QAAAA,WAAW,CAACO,UAAU,CAAC7B,QAAZ,CAAX;AACAuB,QAAAA,OAAO,CAACM,UAAU,CAAC1B,IAAZ,CAAP;AACAqB,QAAAA,eAAe,CAACK,UAAU,CAACzB,YAAZ,CAAf;AACAqB,QAAAA,kBAAkB,CAACI,UAAU,CAACb,eAAZ,CAAlB;AACD;AACF,KAZoB,CAArB;AAcA,WAAO,MAAMU,YAAY,CAACI,WAAb,EAAb;AACD,GAhBQ,EAgBN,CAACtC,kBAAD,EAAqBO,MAArB,CAhBM,CAAT;AAkBA,SAAO;AAAEE,IAAAA,QAAF;AAAYD,IAAAA,QAAZ;AAAsBG,IAAAA,IAAtB;AAA4BC,IAAAA,YAA5B;AAA0CY,IAAAA;AAA1C,GAAP;AACD,CA5BM","sourcesContent":["import React, { createContext, FC, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { Subject } from 'rxjs';\r\nimport { MessagePayloadFileChunkType, MessagePayloadFileInfoType } from '../../types/MessagePayloadType';\r\nimport { stringToArrayBuffer } from '../../util/arrayBufferConverter';\r\n\r\nexport type FILE_BUFFER_MODES = 'downloading' | 'uploading';\r\n\r\nexport type FileBuffer = {\r\n  fileId: string;\r\n  fileName: string;\r\n  fileSize: number;\r\n  mode: FILE_BUFFER_MODES;\r\n  receivedSize: number;\r\n  receivedBuffer: ArrayBuffer[];\r\n  receivedBlob?: Blob;\r\n  receivedBlobUrl?: string;\r\n};\r\nexport type FileBuffersType = { [index: string]: FileBuffer };\r\n\r\nconst fileBuffers: FileBuffersType = {};\r\n\r\nexport type FileBuffersUpdate = {\r\n  fileId: string;\r\n};\r\n\r\nconst fileBuffersUpdates = new Subject<FileBuffersUpdate>();\r\n\r\ntype FileBuffersContextType = { fileBuffersUpdates: typeof fileBuffersUpdates };\r\n\r\nconst contextValue = { fileBuffersUpdates };\r\n\r\nconst FileBuffersContext = createContext<FileBuffersContextType>(contextValue);\r\n\r\nexport const FileBuffersProvider: FC = ({ children }) => {\r\n  return <FileBuffersContext.Provider value={contextValue}>{children}</FileBuffersContext.Provider>;\r\n};\r\n\r\nexport const useOnFileBufferReceived = () => {\r\n  const { fileBuffersUpdates } = useContext(FileBuffersContext);\r\n\r\n  const onFileInfoUploaded = useCallback(\r\n    ({ fileId, fileSize, fileName }: MessagePayloadFileInfoType) => {\r\n      const file = fileBuffers[fileId];\r\n\r\n      if (!file) {\r\n        fileBuffers[fileId] = {\r\n          fileId,\r\n          fileName,\r\n          fileSize,\r\n          mode: 'uploading',\r\n          receivedSize: 0,\r\n          receivedBuffer: [],\r\n        };\r\n      } else {\r\n        file.fileName = fileName;\r\n        file.fileSize = fileSize;\r\n      }\r\n\r\n      fileBuffersUpdates.next({ fileId });\r\n    },\r\n    [fileBuffersUpdates],\r\n  );\r\n\r\n  const onFileChunkUploaded = useCallback(\r\n    ({ fileId, fileChunk }: MessagePayloadFileChunkType) => {\r\n      let file = fileBuffers[fileId];\r\n\r\n      if (!file) {\r\n        fileBuffers[fileId] = {\r\n          fileId,\r\n          fileName: '',\r\n          fileSize: -1,\r\n          mode: 'uploading',\r\n          receivedSize: 0,\r\n          receivedBuffer: [],\r\n        };\r\n\r\n        file = fileBuffers[fileId];\r\n      }\r\n\r\n      const arrayBuffer = stringToArrayBuffer(fileChunk);\r\n      file.receivedSize += arrayBuffer.byteLength;\r\n\r\n      fileBuffersUpdates.next({ fileId });\r\n    },\r\n    [fileBuffersUpdates],\r\n  );\r\n\r\n  const onFileInfoReceived = useCallback(\r\n    ({ fileId, fileSize, fileName }: MessagePayloadFileInfoType) => {\r\n      const file = fileBuffers[fileId];\r\n\r\n      if (!file) {\r\n        fileBuffers[fileId] = {\r\n          fileId,\r\n          fileName,\r\n          fileSize,\r\n          mode: 'downloading',\r\n          receivedSize: 0,\r\n          receivedBuffer: [],\r\n        };\r\n      } else {\r\n        file.fileName = fileName;\r\n        file.fileSize = fileSize;\r\n      }\r\n\r\n      fileBuffersUpdates.next({ fileId });\r\n    },\r\n    [fileBuffersUpdates],\r\n  );\r\n\r\n  const onFileChunkReceived = useCallback(\r\n    ({ fileId, fileChunkIndex, fileChunk }: MessagePayloadFileChunkType) => {\r\n      let file = fileBuffers[fileId];\r\n\r\n      if (!file) {\r\n        fileBuffers[fileId] = {\r\n          fileId,\r\n          fileName: '',\r\n          fileSize: -1,\r\n          mode: 'downloading',\r\n          receivedSize: 0,\r\n          receivedBuffer: [],\r\n        };\r\n\r\n        file = fileBuffers[fileId];\r\n      }\r\n\r\n      const arrayBuffer = stringToArrayBuffer(fileChunk);\r\n      file.receivedBuffer[fileChunkIndex] = arrayBuffer;\r\n      file.receivedSize += arrayBuffer.byteLength;\r\n\r\n      if (file.receivedSize === file.fileSize) {\r\n        file.receivedBlob = new Blob(file.receivedBuffer);\r\n        file.receivedBuffer = [];\r\n        file.receivedBlobUrl = URL.createObjectURL(file.receivedBlob);\r\n      }\r\n\r\n      fileBuffersUpdates.next({ fileId });\r\n    },\r\n    [fileBuffersUpdates],\r\n  );\r\n\r\n  return { onFileInfoUploaded, onFileChunkUploaded, onFileInfoReceived, onFileChunkReceived };\r\n};\r\n\r\nexport const useFileBuffer = (fileId: string) => {\r\n  const { fileBuffersUpdates } = useContext(FileBuffersContext);\r\n\r\n  const [fileName, setFileName] = useState<FileBuffer['fileName'] | undefined>(undefined);\r\n  const [fileSize, setFileSize] = useState<FileBuffer['fileSize'] | undefined>(undefined);\r\n  const [mode, setMode] = useState<FileBuffer['mode'] | undefined>(undefined);\r\n  const [receivedSize, setReceivedSize] = useState<FileBuffer['receivedSize']>(0);\r\n  const [receivedBlobUrl, setReceivedBlobUrl] = useState<FileBuffer['receivedBlobUrl'] | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    const subscription = fileBuffersUpdates.subscribe((fileBufferUpdate) => {\r\n      if (fileBufferUpdate.fileId === fileId) {\r\n        const fileBuffer = fileBuffers[fileId] as FileBuffer | undefined;\r\n\r\n        if (!fileBuffer) return;\r\n\r\n        setFileName(fileBuffer.fileName);\r\n        setFileSize(fileBuffer.fileSize);\r\n        setMode(fileBuffer.mode);\r\n        setReceivedSize(fileBuffer.receivedSize);\r\n        setReceivedBlobUrl(fileBuffer.receivedBlobUrl);\r\n      }\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [fileBuffersUpdates, fileId]);\r\n\r\n  return { fileName, fileSize, mode, receivedSize, receivedBlobUrl };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}